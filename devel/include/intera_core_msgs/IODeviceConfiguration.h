// Generated by gencpp from file intera_core_msgs/IODeviceConfiguration.msg
// DO NOT EDIT!


#ifndef INTERA_CORE_MSGS_MESSAGE_IODEVICECONFIGURATION_H
#define INTERA_CORE_MSGS_MESSAGE_IODEVICECONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <intera_core_msgs/IOComponentConfiguration.h>
#include <intera_core_msgs/IOComponentConfiguration.h>
#include <intera_core_msgs/IOComponentConfiguration.h>

namespace intera_core_msgs
{
template <class ContainerAllocator>
struct IODeviceConfiguration_
{
  typedef IODeviceConfiguration_<ContainerAllocator> Type;

  IODeviceConfiguration_()
    : time()
    , device()
    , ports()
    , signals()  {
    }
  IODeviceConfiguration_(const ContainerAllocator& _alloc)
    : time()
    , device(_alloc)
    , ports(_alloc)
    , signals(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_type;
  _time_type time;

   typedef  ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator>  _device_type;
  _device_type device;

   typedef std::vector< ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator> >::other >  _ports_type;
  _ports_type ports;

   typedef std::vector< ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator> >::other >  _signals_type;
  _signals_type signals;





  typedef boost::shared_ptr< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> const> ConstPtr;

}; // struct IODeviceConfiguration_

typedef ::intera_core_msgs::IODeviceConfiguration_<std::allocator<void> > IODeviceConfiguration;

typedef boost::shared_ptr< ::intera_core_msgs::IODeviceConfiguration > IODeviceConfigurationPtr;
typedef boost::shared_ptr< ::intera_core_msgs::IODeviceConfiguration const> IODeviceConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace intera_core_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'intera_core_msgs': ['/home/lab/ros_ws/src/intera_common/intera_core_msgs/msg', '/home/lab/ros_ws/devel/share/intera_core_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1794fdd703d897a548b2237b9d661697";
  }

  static const char* value(const ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1794fdd703d897a5ULL;
  static const uint64_t static_value2 = 0x48b2237b9d661697ULL;
};

template<class ContainerAllocator>
struct DataType< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intera_core_msgs/IODeviceConfiguration";
  }

  static const char* value(const ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## IO Device Configuration\n\
time time                             # configuration command timestamp\n\
IOComponentConfiguration   device     # device configuration data\n\
IOComponentConfiguration[] ports      # Ports\n\
IOComponentConfiguration[] signals    # Signals\n\
\n\
================================================================================\n\
MSG: intera_core_msgs/IOComponentConfiguration\n\
## IO Component configuration data\n\
string name                  # device name\n\
string config                # device-specific JSON configuration data\n\
\n\
";
  }

  static const char* value(const ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.device);
      stream.next(m.ports);
      stream.next(m.signals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IODeviceConfiguration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intera_core_msgs::IODeviceConfiguration_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "device: ";
    s << std::endl;
    Printer< ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator> >::stream(s, indent + "  ", v.device);
    s << indent << "ports[]" << std::endl;
    for (size_t i = 0; i < v.ports.size(); ++i)
    {
      s << indent << "  ports[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator> >::stream(s, indent + "    ", v.ports[i]);
    }
    s << indent << "signals[]" << std::endl;
    for (size_t i = 0; i < v.signals.size(); ++i)
    {
      s << indent << "  signals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::intera_core_msgs::IOComponentConfiguration_<ContainerAllocator> >::stream(s, indent + "    ", v.signals[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERA_CORE_MSGS_MESSAGE_IODEVICECONFIGURATION_H
